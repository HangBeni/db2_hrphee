DECLARE
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_COUNT
    FROM DBA_USERS T
    WHERE T.USERNAME='CSERKESZ_ADMIN';
    SELECT COUNT(*) INTO V_COUNT
    FROM DBA_USERS T
    WHERE T.USERNAME='DOG_MANAGER';
    IF V_COUNT = 1 THEN
        EXECUTE IMMEDIATE 'DROP USER CSERKESZ_ADMIN CASCADE';
    END IF;
END;
/

CREATE USER CSERKESZ_ADMIN IDENTIFIED BY 12345678 DEFAULT TABLESPACE USERS QUOTA UNLIMITED ON USERS;

/

GRANT CREATE TRIGGER TO CSERKESZ_ADMIN;

GRANT CREATE SESSION TO CSERKESZ_ADMIN;

GRANT CREATE TABLE TO CSERKESZ_ADMIN;

GRANT CREATE VIEW TO CSERKESZ_ADMIN;

GRANT CREATE SEQUENCE TO CSERKESZ_ADMIN;

GRANT CREATE PROCEDURE TO CSERKESZ_ADMIN;

GRANT CREATE TYPE TO CSERKESZ_ADMIN;

ALTER SESSION SET CURRENT_SCHEMA=CSERKESZ_ADMIN;
/
CREATE TABLE MEMBERS (
    MEMBER_ID NUMBER PRIMARY KEY,
    FIRST_NAME VARCHAR2(40) NOT NULL,
    LAST_NAME VARCHAR2(80) NOT NULL,
    MOTHERS_NAME VARCHAR2(120) NOT NULL,
    MOTHERS_TELEPHONE_NUMBER VARCHAR2(12) NOT NULL,
    MOTHERS_EMAIL VARCHAR2(60) NOT NULL,
    MEMBER_EMAIL VARCHAR2(60),
    MEMBER_TELEPHONE_NUMBER VARCHAR2(12),
    ADDRESS_ID NUMBER NOT NULL,
    BIRTH_DATE DATE,
    ORS_ID NUMBER,
    PATROL_ID NUMBER
) TABLESPACE USERS;
/
CREATE TABLE MEMBER_HIS (
    CHANGE_ID NUMBER PRIMARY KEY,
    CHANGER_ID NUMBER NOT NULL,
    LOG_MSSG VARCHAR2(4000) NOT NULL,
    TR_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
/
CREATE TABLE ADDRESS (
    ADDRESS_ID NUMBER PRIMARY KEY,
    ZIP_CODE VARCHAR2(10) NOT NULL,
    COUNTRY VARCHAR2(50) NOT NULL,
    CITY VARCHAR2(50) NOT NULL,
    STREET_NAME VARCHAR2(100) NOT NULL,
    STREET_TYPE VARCHAR2(40) NOT NULL,
    HOUSE_NUMBER VARCHAR2(20) NOT NULL,
);
/
CREATE TABLE ORS (
    ORS_ID NUMBER PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    PATROL_ID NUMBER NOT NULL,
);
/
CREATE TABLE PATROL (
    PATROL_ID NUMBER PRIMARY KEY,
    PATROL_NAME VARCHAR2(100) NOT NULL
);
/
CREATE TABLE RANK_PRIVILEGES (
    STATUS_ID NUMBER PRIMARY KEY,
    MEMBER_ID NUMBER NOT NULL,
    RANK_ID NUMBER NOT NULL,
    PROMOTION_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
/
CREATE TABLE RANK_DICTIONARY (
    RANK_ID NUMBER PRIMARY KEY,
    RANK_NAME VARCHAR(50) NOT NULL
);
/
CREATE TABLE RANK_PRIVILEGES_HIS (
    CHANGE_ID NUMBER PRIMARY KEY,
    CHANGER_ID NUMBER NOT NULL,
    LOG_MSSG VARCHAR2(4000) NOT NULL,
    TR_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
/
CREATE TABLE GATHERING_REPORTS (
    REPORT_ID NUMBER PRIMARY KEY,
    REPORT_CONTENT CLOB NOT NULL,
    AUTHOR_ID NUMBER NOT NULL,
    ORS_ID NUMBER NOT NULL,
);
/
CREATE TABLE GATHERING_HIS (
    LOG_ID NUMBER PRIMARY KEY,
    CHANGER_ID NUMBER NOT NULL,
    LOG_MSSG VARCHAR2(4000) NOT NULL,
    TR_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
/
CREATE TABLE MEETING (
    MEETING_ID NUMBER PRIMARY KEY,
    MEETING_TITLE VARCHAR2(30) NOT NULL,
    MEETING_CONTENT CLOB NOT NULL,
    AUTHOR_ID NUMBER NOT NULL,
    CREATE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
/
CREATE TABLE MEETING_HIS (
    LOG_ID NUMBER PRIMARY KEY,
    CHANGER_ID NUMBER NOT NULL,
    LOG_MSSG VARCHAR2(4000) NOT NULL,
    TR_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
/
CREATE TABLE EVENTS (
    EVENT_ID NUMBER PRIMARY KEY,
    EVENT_NAME VARCHAR2(100) NOT NULL,
    EVENT_DESCRIPTION VARCHAR2(2000) NOT NULL,
    DATE_START TIMESTAMP NOT NULL,
    DATE_END TIMESTAMP NOT NULL
);
/
CREATE TABLE DUTIES (
    DUTY_ID NUMBER PRIMARY KEY,
    DUTY_NAME VARCHAR2(100) NOT NULL,
    DUTY_DESCRIPTION VARCHAR2(500),
    EVENT_ID NUMBER NOT NULL,
);
/
CREATE TABLE EVENT_DUTIES_HIS (
    LOG_ID NUMBER PRIMARY KEY,
    AUTHOR_ID NUMBER NOT NULL,
    LOG_MSSG VARCHAR2(2000) NOT NULL,
    TR_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
/
CREATE TABLE KNOWLEDGE (
    KNOWLEDGE_ID NUMBER PRIMARY KEY,
    KNOWLEDGE_AUTHOR_ID NUMBER NOT NULL,
    KNOWLEDGE_NAME VARCHAR2(100) NOT NULL,
);
/
CREATE TABLE KNOWLEDGE_MEDIA(
    KNOWLEDGE_ID NUMBER NOT NULL,
    MEDIA_ID NUMBER NOT NULL
);
/
CREATE TABLE MEDIA(
    MEDIA_ID NUMBER PRIMARY KEY,
    MEDIA_NAME VARCHAR2(50) NOT NULL,
    MEDIA_VALUE BLOB,
    MEDIA_TYPE VARCHAR2(6) NOT NULL,
    AUTHOR_ID NUMBER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
/
CREATE TABLE POSTS (
    POST_ID NUMBER PRIMARY KEY,
    POST_NAME VARCHAR2(100) NOT NULL,
    POST_DESCRIPTION VARCHAR2(2000),
    POST_TYPE VARCHAR2(4) NOT NULL, -- ['NEWS', 'BLOG', 'KNOW']
);
/
ALTER TABLE MEMBERS
    ADD CONSTRAINT MEMBERS_ADDRESS_FK FOREIGN KEY (
        ADDRESS_ID
    )
        REFERENCES ADDRESS(
            ADDRESS_ID
        );
/
ALTER TABLE MEMBERS
    ADD CONSTRAINT MEMBERS_ORS_FK FOREIGN KEY (
        ORS_ID
    )
        REFERENCES ORS(
            ORS_ID
        );
/
ALTER TABLE MEMBERS
    ADD CONSTRAINT MEMBERS_PATROL_FK FOREIGN KEY (
        PATROL_ID
    )
        REFERENCES PATROL(
            PATROL_ID
        );
/
ALTER TABLE MEMBER_HIS
    ADD CONSTRAINT MEMBER_HIS_FK FOREIGN KEY (
        CHANGER_ID
    )
        REFERENCES MEMBERS(
            MEMBER_ID
        );
/
ALTER TABLE ORS
    ADD CONSTRAINT ORS_PATROL_FK FOREIGN KEY (
        PATROL_ID
    )
        REFERENCES PATROL(
            PATROL_ID
        );
/
ALTER TABLE RANK_PRIVILEGES
    ADD CONSTRAINT RANK_TYPE_FK FOREIGN KEY (
        RANK_ID
    )
        REFERENCES RANK_DICTIONARY(
            RANK_ID
        );
/
ALTER TABLE GATHERING_REPORTS
    ADD CONSTRAINT GATHERING_AUTHOR_FK FOREIGN KEY (
        AUTHOR_ID
    )
        REFERENCES MEMBERS(
            MEMBER_ID
        );
/
ALTER TABLE GATHERING_REPORTS
    ADD CONSTRAINT GATHERING_ORS_FK FOREIGN KEY (
        ORS_ID
    )
        REFERENCES ORS(
            ORS_ID
        );
/
ALTER TABLE GATHERING_HIS
    ADD CONSTRAINT GATHERING_HIS_CHANGER_FK FOREIGN KEY (
        CHANGER_ID
    )
        REFERENCES MEMBERS(
            MEMBER_ID
        );
/
ALTER TABLE MEETING
    ADD CONSTRAINT MEETING_AUTHOR_FK FOREIGN KEY (
        AUTHOR_ID
    )
        REFERENCES MEMBERS(
            MEMBER_ID
        );
/
ALTER TABLE MEETING_HIS
    ADD CONSTRAINT MEETING_HIS_CHANGER_FK FOREIGN KEY (
        CHANGER_ID
    )
        REFERENCES MEETING(
            MEETING_ID
        );
/
ALTER TABLE DUTIES
    ADD CONSTRAINT DUTIES_EVENT_FK FOREIGN KEY (
        EVENT_ID
    )
        REFERENCES EVENTS(
            EVENT_ID
        );
/
ALTER TABLE EVENT_DUTIES_HIS
    ADD CONSTRAINT EVENT_DUTIES_HIS_AUTHOR_FK FOREIGN KEY (
        AUTHOR_ID
    )
        REFERENCES MEMBERS(
            MEMBER_ID
        );
/
ALTER TABLE KNOWLEDGE
    ADD CONSTRAINT KNOWLEDGE_AUTHOR_FK FOREIGN KEY (
        KNOWLEDGE_AUTHOR_ID
    )
        REFERENCES MEMBERS(
            MEMBER_ID
        );
/
ALTER TABLE KNOWLEDGE_MEDIA
    ADD CONSTRAINT KNOWLEDGE_AUTHOR_PK PRIMARY KEY (
        KNOWLEDGE_ID,
        MEDIA_ID
    );
/
ALTER TABLE MEDIA
    ADD CONSTRAINT MEDIA_AUTHOR_FK FOREIGN KEY (
        AUTHOR_ID
    )
        REFERENCES MEMBERS(
            MEMBER_ID
        );
/
-- Sequences
CREATE SEQUENCE REPORTS_SEQ
START WITH 1300
INCREMENT BY 1;
/
CREATE SEQUENCE MEMBERS_SEQ
START WITH 140
INCREMENT BY 1;
/
CREATE SEQUENCE ADDRES_SEQ
START WITH 10
INCREMENT BY 1;
/
CREATE SEQUENCE ORS_PATROL_SEQ
START WITH 166
INCREMENT BY 1;
/
CREATE SEQUENCE POSTS_SEQ
START WITH 1350
INCREMENT BY 1;
/
CREATE SEQUENCE KNOWLEDGE_MEDIA_SEQ
START WITH 1370
INCREMENT BY 1;
/

-- PROCEDURES
CREATE OR REPLACE FUNCTION HAVE_MEMBER_RANK_BY_NAME_FUNC(
    P_MEMBER_ID RANK_PRIVILEGES.MEMBER_ID%TYPE,
    P_RANK_NAME RANK_DICTIONARY.RANK_NAME%TYPE
) RETURN BOOLEAN IS
    V_RESULT NUMBER;
BEGIN
    SELECT CASE
            WHEN COUNT(*) > 0 THEN
                1
            ELSE
                0
        END INTO V_RESULT
    FROM RANK_PRIVILEGES
    WHERE MEMBER_ID = P_MEMBER_ID AND RANK_ID IN (
            SELECT RANK_ID
            FROM RANK_DICTIONARY
            WHERE RANK_NAME = P_RANK_NAME
        );
    RETURN V_RESULT = 1;
END HAVE_MEMBER_RANK_BY_NAME_FUNC;
/

CREATE OR REPLACE FUNCTION HAVE_MEMBER_RANK_BY_ID_FUNC(
    P_MEMBER_ID RANK_PRIVILEGES.MEMBER_ID%TYPE,
    P_RANK_ID RANK_PRIVILEGES.RANK_ID%TYPE
) RETURN BOOLEAN IS
    V_RESULT NUMBER;
BEGIN
    SELECT CASE
            WHEN COUNT(*) > 0 THEN
                1
            ELSE
                0
        END INTO V_RESULT
    FROM RANK_PRIVILEGES
    WHERE MEMBER_ID = P_MEMBER_ID AND RANK_ID = P_RANK_ID;
    RETURN V_RESULT = 1;
END HAVE_MEMBER_RANK_BY_ID_FUNC;
/

CREATE OR REPLACE PROCEDURE CREATE_NEW_RANK(
    P_RANK_NAME RANK_DICTIONARY.RANK_NAME%TYPE
) IS
BEGIN
    INSERT INTO RANK_DICTIONARY(
        RANK_NAME
    ) VALUES (
        P_RANK_NAME
    );
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_RANK_BY_NAME(
    P_RANK_NAME RANK_DICTIONARY.RANK_NAME%TYPE
) IS
    V_RANK_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_RANK_COUNT
    FROM RANK_PRIVILEGES
    WHERE RANK_PRIVILEGES.RANK_ID = (
            SELECT RANK_ID
            FROM RANK_DICTIONARY
            WHERE RANK_NAME = P_RANK_NAME
        );
    CASE
        WHEN V_RANK_COUNT = 0 THEN
            DELETE FROM RANK_DICTIONARY
            WHERE
                RANK_NAME = P_RANK_NAME;
            COMMIT;
        WHEN V_RANK_COUNT > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'This rank is in use');
    END CASE;
END DELETE_RANK_BY_NAME;
/

CREATE OR REPLACE PROCEDURE DELETE_RANK_BY_ID(
    P_RANK_ID RANK_DICTIONARY.RANK_ID%TYPE
) IS
    V_RANK_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_RANK_COUNT
    FROM RANK_PRIVILEGES
    WHERE RANK_PRIVILEGES.RANK_ID = P_RANK_ID;
    CASE
        WHEN V_RANK_COUNT = 0 THEN
            DELETE FROM RANK_DICTIONARY
            WHERE
                RANK_NAME = P_RANK_ID;
            COMMIT;
        WHEN V_RANK_COUNT > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'This rank is in use');
    END CASE;
END DELETE_RANK_BY_ID;
/

-- Initail data inserts