CREATE TABLE RANK_PRIVILEGES (
    STATUS_ID NUMBER PRIMARY KEY,
    MEMBER_ID NUMBER NOT NULL,
    RANK_ID NUMBER NOT NULL,
    PROMOTION_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT MEMBER_RANK_FK FOREIGN KEY (MEMBER_ID) REFERENCES MEMBERS(MEMBER_ID),
    CONSTRAINT RANK_DICTIONARY_FK FOREIGN KEY (RANK_ID) REFERENCES RANK_DICTIONARY(RANK_ID),
    CONSTRAINT MEMBER_RANK_U UNIQUE (MEMBER_ID, RANK_ID),
    CONSTRAINT PROMOTION_TIME_CK CHECK (
        PROMOTION_TIME + INTERVAL '1' YEAR >= CURRENT_TIMESTAMP 
    )
);

CREATE OR REPLACE TABLE RANK_DICTIONARY (
    RANK_ID NUMBER PRIMARY KEY,
    RANK_NAME VARCHAR(50) NOT NULL
);

CREATE OR REPLACE TABLE RANK_PRIVILEGES_HIS (
    CHANGE_ID NUMBER PRIMARY KEY,
    CHANGER VARCHAR2(40) NOT NULL,
    LOG_MSSG VARCHAR2(4000) NOT NULL,
    TR_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

--TODO: Package

CREATE OR REPLACE FUNCTION HAVE_MEMBER_RANK_BY_NAME_FUNC(
    P_MEMBER_ID RANK_PRIVILEGES.MEMBER_ID%TYPE,
    P_RANK_NAME RANK_DICTIONARY.RANK_NAME%TYPE
) RETURN NUMBER IS
    V_RESULT NUMBER;
BEGIN
    SELECT CASE
            WHEN COUNT(*) > 0 THEN
                 1
            ELSE
                 0
        END INTO V_RESULT
    FROM RANK_PRIVILEGES
    WHERE MEMBER_ID = P_MEMBER_ID AND RANK_ID IN (
            SELECT RANK_ID
            FROM RANK_DICTIONARY
            WHERE UPPER(RANK_NAME) = UPPER(P_RANK_NAME)
        );
        RETURN V_RESULT;
END HAVE_MEMBER_RANK_BY_NAME_FUNC;
/

CREATE OR REPLACE FUNCTION HAVE_MEMBER_RANK_BY_ID_FUNC(
    P_MEMBER_ID RANK_PRIVILEGES.MEMBER_ID%TYPE,
    P_RANK_ID RANK_PRIVILEGES.RANK_ID%TYPE
) RETURN NUMBER IS
    V_RESULT NUMBER;
BEGIN
    SELECT CASE
            WHEN COUNT(*) > 0 THEN
                1
            ELSE
                0
        END INTO V_RESULT
    FROM RANK_PRIVILEGES
    WHERE MEMBER_ID = P_MEMBER_ID AND RANK_ID = P_RANK_ID;
    RETURN V_RESULT;
END HAVE_MEMBER_RANK_BY_ID_FUNC;
/

CREATE OR REPLACE PROCEDURE CREATE_NEW_RANK(
    P_RANK_NAME RANK_DICTIONARY.RANK_NAME%TYPE
) IS
BEGIN
    INSERT INTO RANK_DICTIONARY(
        RANK_NAME
    ) VALUES (
        P_RANK_NAME
    );
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_RANK_BY_NAME(
    P_RANK_NAME RANK_DICTIONARY.RANK_NAME%TYPE
) IS
    V_RANK_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_RANK_COUNT
    FROM RANK_PRIVILEGES
    WHERE RANK_PRIVILEGES.RANK_ID = (
            SELECT RANK_ID
            FROM RANK_DICTIONARY
            WHERE RANK_NAME = P_RANK_NAME
        );
    CASE
        WHEN V_RANK_COUNT = 0 THEN
            DELETE FROM RANK_DICTIONARY
            WHERE
                RANK_NAME = P_RANK_NAME;
            COMMIT;
        WHEN V_RANK_COUNT > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'This rank is in use');
    END CASE;
END DELETE_RANK_BY_NAME;
/

CREATE OR REPLACE PROCEDURE DELETE_RANK_BY_ID(
    P_RANK_ID RANK_DICTIONARY.RANK_ID%TYPE
) IS
    V_RANK_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_RANK_COUNT
    FROM RANK_PRIVILEGES
    WHERE RANK_PRIVILEGES.RANK_ID = P_RANK_ID;
    CASE
        WHEN V_RANK_COUNT = 0 THEN
            DELETE FROM RANK_DICTIONARY
            WHERE
                RANK_NAME = P_RANK_ID;
            COMMIT;
        WHEN V_RANK_COUNT > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'This rank is in use');
    END CASE;
END DELETE_RANK_BY_ID;
/