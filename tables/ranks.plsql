CREATE OR REPLACE TABLE RANK_PRIVILEGES (
    STATUS_ID NUMBER PRIMARY KEY,
    MEMBER_ID NUMBER NOT NULL,
    RANK_ID NUMBER NOT NULL
);

ALTER TABLE RANK_PRIVILEGES
    ADD CONSTRAINT RANK_MEMBER_FK FOREIGN KEY (
        MEMBER_ID
    )
        REFERENCES MEMBERS(
            MEMBER_ID
        );

ALTER TABLE RANK_PRIVILEGES
    ADD CONSTRAINT RANK_TYPE_FK FOREIGN KEY (
        RANK_ID
    )
        REFERENCES RANK_DICTIONARY(
            RANK_ID
        );

CREATE OR REPLACE TABLE RANK_DICTIONARY (
    RANK_ID NUMBER PRIMARY KEY,
    RANK_NAME VARCHAR(50) NOT NULL
);

CREATE OR REPLACE TABLE RANK_PRIVILEGES_HIS (
    CHANGE_ID NUMBER PRIMARY KEY,
    CHANGER_ID NUMBER NOT NULL LOG_MSSG VARCHAR2(4000) NOT NULL,
    TR_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE RANK_PRIVILEGES_HIS
    ADD CONSTRAINT RANK_TYPE_FK FOREIGN KEY (
        CHANGER_ID
    )
        REFERENCES MEMBERS(
            MEMBER_ID
        );

--TODO: Package

CREATE OR REPLACE FUNCTION HAVE_MEMBER_RANK_BY_NAME_FUNC(
    P_MEMBER_ID RANK_PRIVILEGES.MEMBER_ID%TYPE,
    P_RANK_NAME RANK_DICTIONARY.RANK_NAME%TYPE
) RETURN BOOLEAN IS
BEGIN
    SELECT CASE
            WHEN COUNT(*) > 0 THEN
                TRUE
            ELSE
                FALSE
        END
    FROM RANK_PRIVILEGES
    WHERE MEMBER_ID = P_MEMBER_ID AND RANK_ID IS (
            SELECT RANK_ID
            FROM RANK_DICTIONARY
            WHERE RANK_NAME = P_RANK_NAME
        );
END HAVE_MEMBER_RANK_BY_NAME_FUNC;

CREATE OR REPLACE FUNCTION HAVE_MEMBER_RANK_BY_ID_FUNC( P_MEMBER_ID RANK_PRIVILEGES.MEMBER_ID%TYPE, P_RANK_ID RANK_PRIVILEGES.RANK_ID%TYPE ) RETURN BOOLEAN IS
BEGIN
    SELECT CASE
            WHEN COUNT(*) > 0 THEN
                TRUE
            ELSE
                FALSE
        END
    FROM RANK_PRIVILEGES
    WHERE MEMBER_ID = P_MEMBER_ID AND RANK_ID = P_RANK_ID
END HAVE_MEMBER_RANK_BY_ID_FUNC;